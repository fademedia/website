---
import type { ImageMetadata } from "astro";
import { getImageBlurSvg } from "./blur";
import lqip from "lqip-modern";
import path from "path";
type Props = {
  src: string;
  alt: string;
  width?: number | string;
  height?: number | string;
  srcMeta: ImageMetadata;
  [key: string]: any;
} & Omit<astroHTML.JSX.ImgHTMLAttributes, "src" | "width" | "height">;
const {
  src,
  alt,
  decoding,
  loading,
  sizes,
  srcset,
  width,
  height,
  style,
  srcMeta,
  generated,
  ...rest
} = Astro.props;
let sourceLocation: string;
if (import.meta.env.MODE === "development") {
  sourceLocation = srcMeta.src.replace("/@fs", "").split("?")[0];
} else {
  const cwd = process.cwd();
  // We need to resolve /_astro to <process.cwd>/dist/_astro
  const location = path.join(cwd, "dist", srcMeta.src);
  sourceLocation = location;
}

// @ts-ignore
const blurData = await lqip(sourceLocation).then((r) => r.metadata);

// Generate placeholder
const svgUrl = `url("data:image/svg+xml;charset=utf-8,${getImageBlurSvg({
  widthInt: srcMeta.width,
  heightInt: srcMeta.height,
  blurWidth: blurData.width,
  blurHeight: blurData.height,
  blurDataURL: blurData.dataURIBase64,
  objectFit: "cover",
})}")`;
const onLoad = `
this.style.setProperty('--placeholder', null);
this.removeAttribute('onload');
`;
---

<img
  src={src}
  srcset={srcset}
  sizes={sizes}
  alt={alt}
  loading={loading}
  decoding={decoding}
  onload={onLoad.trim()}
  {...rest}
/>

<style lang="scss" define:vars={{ placeholder: svgUrl }}>
  img {
    background-image: var(--placeholder);
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    opacity: 1;
    z-index: 1;
  }
</style>
